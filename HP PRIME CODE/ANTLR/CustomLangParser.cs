//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CustomLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CustomLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, EXPORT=42, BEGIN=43, LOCAL=44, CASE=45, 
		DEFAULT=46, IF=47, THEN=48, ELSE=49, IFERR=50, FOR=51, FROM=52, WHILE=53, 
		TO=54, DO=55, DOWNTO=56, STEP=57, PRINT=58, REPEAT=59, UNTIL=60, END=61, 
		BREAK=62, CONTINUE=63, VIEW=64, AND=65, OR=66, XOR=67, NOT=68, ID=69, 
		HEX_NUMBER=70, NUMBER=71, ASSIGN=72, EQUALS=73, SEMI=74, STRING=75, WS=76, 
		COMMENT=77;
	public const int
		RULE_program = 0, RULE_viewStatement = 1, RULE_pragma = 2, RULE_pragmaSetting = 3, 
		RULE_separatorValue = 4, RULE_integerType = 5, RULE_globalVariableDeclaration = 6, 
		RULE_functionDeclaration = 7, RULE_functionDefinition = 8, RULE_functionVariable = 9, 
		RULE_statement = 10, RULE_variableDeclaration = 11, RULE_variableDeclarator = 12, 
		RULE_assignLocal = 13, RULE_assignment = 14, RULE_complexExpression = 15, 
		RULE_caseStatement = 16, RULE_ifStatement = 17, RULE_iferrStatement = 18, 
		RULE_forStatement = 19, RULE_whileStatement = 20, RULE_repeatStatement = 21, 
		RULE_printStatement = 22, RULE_functionCall = 23, RULE_subFunctionCall = 24, 
		RULE_killStatement = 25, RULE_returnStatement = 26, RULE_breakStatement = 27, 
		RULE_continueStatement = 28, RULE_storeStatement = 29, RULE_expression = 30, 
		RULE_array = 31, RULE_matrix = 32, RULE_list = 33, RULE_complex = 34, 
		RULE_integralExpression = 35, RULE_summationExpression = 36, RULE_expressionList = 37, 
		RULE_idList = 38, RULE_derivativeExpression = 39, RULE_sqrtExpression = 40, 
		RULE_listSum = 41, RULE_listProduct = 42, RULE_firstDifferences = 43, 
		RULE_factorialExpression = 44, RULE_basetoReal = 45, RULE_relationalOperator = 46, 
		RULE_logicalOperator = 47, RULE_matrixAccess = 48, RULE_listAccess = 49;
	public static readonly string[] ruleNames = {
		"program", "viewStatement", "pragma", "pragmaSetting", "separatorValue", 
		"integerType", "globalVariableDeclaration", "functionDeclaration", "functionDefinition", 
		"functionVariable", "statement", "variableDeclaration", "variableDeclarator", 
		"assignLocal", "assignment", "complexExpression", "caseStatement", "ifStatement", 
		"iferrStatement", "forStatement", "whileStatement", "repeatStatement", 
		"printStatement", "functionCall", "subFunctionCall", "killStatement", 
		"returnStatement", "breakStatement", "continueStatement", "storeStatement", 
		"expression", "array", "matrix", "list", "complex", "integralExpression", 
		"summationExpression", "expressionList", "idList", "derivativeExpression", 
		"sqrtExpression", "listSum", "listProduct", "firstDifferences", "factorialExpression", 
		"basetoReal", "relationalOperator", "logicalOperator", "matrixAccess", 
		"listAccess"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'", "'#pragma'", "'mode'", "'separator'", "'integer'", 
		"'.'", "'h32'", "'h64'", "'KILL'", "'kill'", "'RETURN'", "'\\u25B6'", 
		"'^'", "'*'", "'/'", "'+'", "'-'", "'['", "']'", "'{'", "'}'", "'\\u222B'", 
		"'\\u03A3'", "'\\u2202'", "'\\u221A'", "'\\u03A3LIST'", "'\\u03A0LIST'", 
		"'\\u0394LIST'", "'!'", "'B\\u2192R'", "'>'", "'<'", "'\\u2264'", "'\\u2265'", 
		"'=='", "'>='", "'<='", "'\\u2260'", "'<>'", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "':='", "'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "EXPORT", "BEGIN", "LOCAL", "CASE", 
		"DEFAULT", "IF", "THEN", "ELSE", "IFERR", "FOR", "FROM", "WHILE", "TO", 
		"DO", "DOWNTO", "STEP", "PRINT", "REPEAT", "UNTIL", "END", "BREAK", "CONTINUE", 
		"VIEW", "AND", "OR", "XOR", "NOT", "ID", "HEX_NUMBER", "NUMBER", "ASSIGN", 
		"EQUALS", "SEMI", "STRING", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CustomLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CustomLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CustomLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CustomLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CustomLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext[] pragma() {
			return GetRuleContexts<PragmaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext pragma(int i) {
			return GetRuleContext<PragmaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext[] globalVariableDeclaration() {
			return GetRuleContexts<GlobalVariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration(int i) {
			return GetRuleContext<GlobalVariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewStatementContext[] viewStatement() {
			return GetRuleContexts<ViewStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewStatementContext viewStatement(int i) {
			return GetRuleContext<ViewStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3 || _la==EXPORT || _la==VIEW || _la==ID) {
				{
				State = 105;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 100;
					pragma();
					}
					break;
				case 2:
					{
					State = 101;
					functionDeclaration();
					}
					break;
				case 3:
					{
					State = 102;
					functionDefinition();
					}
					break;
				case 4:
					{
					State = 103;
					globalVariableDeclaration();
					}
					break;
				case 5:
					{
					State = 104;
					viewStatement();
					}
					break;
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(CustomLangParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CustomLangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(CustomLangParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CustomLangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ViewStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitViewStatement(this);
		}
	}

	[RuleVersion(0)]
	public ViewStatementContext viewStatement() {
		ViewStatementContext _localctx = new ViewStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_viewStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(VIEW);
			State = 113;
			Match(STRING);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 114;
				Match(T__0);
				}
			}

			State = 117;
			Match(ID);
			State = 118;
			Match(T__1);
			State = 119;
			Match(T__2);
			State = 120;
			Match(BEGIN);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
				{
				{
				State = 121;
				statement();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127;
			Match(END);
			State = 128;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PragmaSettingContext pragmaSetting() {
			return GetRuleContext<PragmaSettingContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(Context, State);
		EnterRule(_localctx, 4, RULE_pragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(T__3);
			State = 131;
			Match(T__4);
			State = 132;
			Match(T__1);
			State = 133;
			pragmaSetting();
			State = 134;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaSettingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeparatorValueContext separatorValue() {
			return GetRuleContext<SeparatorValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public PragmaSettingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaSetting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterPragmaSetting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitPragmaSetting(this);
		}
	}

	[RuleVersion(0)]
	public PragmaSettingContext pragmaSetting() {
		PragmaSettingContext _localctx = new PragmaSettingContext(Context, State);
		EnterRule(_localctx, 6, RULE_pragmaSetting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 136;
				Match(T__5);
				State = 137;
				Match(T__1);
				State = 138;
				separatorValue();
				State = 139;
				Match(T__2);
				}
			}

			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 143;
				Match(T__6);
				State = 144;
				Match(T__1);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8 || _la==T__9) {
					{
					State = 145;
					integerType();
					}
				}

				State = 148;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		public SeparatorValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separatorValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterSeparatorValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitSeparatorValue(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorValueContext separatorValue() {
		SeparatorValueContext _localctx = new SeparatorValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_separatorValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 151;
				Match(T__7);
				}
			}

			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 154;
				Match(T__0);
				}
			}

			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 157;
				Match(SEMI);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_integerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
	 
		public GlobalVariableDeclarationContext() { }
		public virtual void CopyFrom(GlobalVariableDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Asignar_ValorContext : GlobalVariableDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CustomLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Asignar_ValorContext(GlobalVariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterAsignar_Valor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitAsignar_Valor(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_globalVariableDeclaration);
		int _la;
		try {
			_localctx = new Asignar_ValorContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(ID);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 163;
				Match(ASSIGN);
				State = 164;
				expression(0);
				}
			}

			State = 167;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	 
		public FunctionDeclarationContext() { }
		public virtual void CopyFrom(FunctionDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Declarar_FuncionContext : FunctionDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		public Declarar_FuncionContext(FunctionDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterDeclarar_Funcion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitDeclarar_Funcion(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDeclaration);
		try {
			_localctx = new Declarar_FuncionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(ID);
			State = 170;
			Match(T__1);
			State = 171;
			Match(T__2);
			State = 172;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(CustomLangParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CustomLangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(CustomLangParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVariableContext[] functionVariable() {
			return GetRuleContexts<FunctionVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionVariableContext functionVariable(int i) {
			return GetRuleContext<FunctionVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPORT) {
				{
				State = 174;
				Match(EXPORT);
				}
			}

			State = 177;
			Match(ID);
			State = 178;
			Match(T__1);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 179;
				functionVariable();
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 180;
					Match(T__0);
					State = 181;
					functionVariable();
					}
					}
					State = 186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 189;
			Match(T__2);
			State = 190;
			Match(BEGIN);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
				{
				{
				State = 191;
				statement();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 197;
			Match(END);
			State = 198;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		public FunctionVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterFunctionVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitFunctionVariable(this);
		}
	}

	[RuleVersion(0)]
	public FunctionVariableContext functionVariable() {
		FunctionVariableContext _localctx = new FunctionVariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IferrStatementContext iferrStatement() {
			return GetRuleContext<IferrStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KillStatementContext killStatement() {
			return GetRuleContext<KillStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexExpressionContext complexExpression() {
			return GetRuleContext<ComplexExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoreStatementContext storeStatement() {
			return GetRuleContext<StoreStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				caseStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 205;
				ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 206;
				iferrStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 207;
				whileStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 208;
				forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 209;
				repeatStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 210;
				printStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 211;
				functionCall();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 212;
				killStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 213;
				returnStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 214;
				breakStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 215;
				continueStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 216;
				complexExpression();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 217;
				storeStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(CustomLangParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(LOCAL);
			State = 221;
			variableDeclarator();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 222;
				Match(T__0);
				State = 223;
				variableDeclarator();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignLocalContext assignLocal() {
			return GetRuleContext<AssignLocalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 24, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(ID);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN || _la==EQUALS) {
				{
				State = 232;
				assignLocal();
				State = 233;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignLocalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CustomLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CustomLangParser.EQUALS, 0); }
		public AssignLocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignLocal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterAssignLocal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitAssignLocal(this);
		}
	}

	[RuleVersion(0)]
	public AssignLocalContext assignLocal() {
		AssignLocalContext _localctx = new AssignLocalContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignLocal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==EQUALS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CustomLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatrixAccessContext matrixAccess() {
			return GetRuleContext<MatrixAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessContext listAccess() {
			return GetRuleContext<ListAccessContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_assignment);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				Match(ID);
				State = 240;
				Match(ASSIGN);
				State = 241;
				expression(0);
				State = 242;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 244;
					matrixAccess();
					}
					break;
				case 2:
					{
					State = 245;
					listAccess();
					}
					break;
				}
				State = 248;
				Match(ASSIGN);
				State = 249;
				expression(0);
				State = 250;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext[] relationalOperator() {
			return GetRuleContexts<RelationalOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator(int i) {
			return GetRuleContext<RelationalOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public ComplexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterComplexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitComplexExpression(this);
		}
	}

	[RuleVersion(0)]
	public ComplexExpressionContext complexExpression() {
		ComplexExpressionContext _localctx = new ComplexExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_complexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			expression(0);
			State = 255;
			relationalOperator();
			State = 256;
			expression(0);
			State = 257;
			relationalOperator();
			State = 258;
			expression(0);
			State = 259;
			logicalOperator();
			State = 260;
			expression(0);
			State = 261;
			relationalOperator();
			State = 262;
			expression(0);
			State = 263;
			relationalOperator();
			State = 264;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(CustomLangParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CustomLangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(CustomLangParser.DEFAULT, 0); }
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(CASE);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
				{
				{
				State = 267;
				statement();
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 273;
				Match(DEFAULT);
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
					{
					{
					State = 274;
					statement();
					}
					}
					State = 279;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 282;
			Match(END);
			State = 283;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CustomLangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(CustomLangParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CustomLangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CustomLangParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(IF);
			State = 286;
			expression(0);
			State = 287;
			Match(THEN);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
				{
				{
				State = 288;
				statement();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 294;
				Match(ELSE);
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
					{
					{
					State = 295;
					statement();
					}
					}
					State = 300;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 303;
			Match(END);
			State = 304;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IferrStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFERR() { return GetToken(CustomLangParser.IFERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(CustomLangParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CustomLangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CustomLangParser.ELSE, 0); }
		public IferrStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iferrStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterIferrStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitIferrStatement(this);
		}
	}

	[RuleVersion(0)]
	public IferrStatementContext iferrStatement() {
		IferrStatementContext _localctx = new IferrStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_iferrStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(IFERR);
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 307;
				expression(0);
				}
				break;
			case 2:
				{
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
					{
					{
					State = 308;
					statement();
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 316;
			Match(THEN);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
				{
				{
				State = 317;
				statement();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 323;
				Match(ELSE);
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
					{
					{
					State = 324;
					statement();
					}
					}
					State = 329;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 332;
			Match(END);
			State = 333;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(CustomLangParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CustomLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(CustomLangParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CustomLangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(CustomLangParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOWNTO() { return GetToken(CustomLangParser.DOWNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(CustomLangParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(CustomLangParser.FROM, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_forStatement);
		int _la;
		try {
			State = 375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335;
				Match(FOR);
				State = 336;
				Match(ID);
				State = 337;
				Match(ASSIGN);
				State = 338;
				expression(0);
				State = 339;
				_la = TokenStream.LA(1);
				if ( !(_la==TO || _la==DOWNTO) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 340;
				expression(0);
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STEP) {
					{
					State = 341;
					Match(STEP);
					State = 342;
					expression(0);
					}
				}

				State = 345;
				Match(DO);
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
					{
					{
					State = 346;
					statement();
					}
					}
					State = 351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 352;
				Match(END);
				State = 353;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355;
				Match(FOR);
				State = 356;
				expression(0);
				State = 357;
				Match(FROM);
				State = 358;
				expression(0);
				State = 359;
				_la = TokenStream.LA(1);
				if ( !(_la==TO || _la==DOWNTO) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 360;
				expression(0);
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STEP) {
					{
					State = 361;
					Match(STEP);
					State = 362;
					expression(0);
					}
				}

				State = 365;
				Match(DO);
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
					{
					{
					State = 366;
					statement();
					}
					}
					State = 371;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 372;
				Match(END);
				State = 373;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CustomLangParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(CustomLangParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CustomLangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(WHILE);
			State = 378;
			expression(0);
			State = 379;
			Match(DO);
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
				{
				{
				State = 380;
				statement();
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 386;
			Match(END);
			State = 387;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(CustomLangParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(CustomLangParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_repeatStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(REPEAT);
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3734416470519039996L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
				{
				{
				State = 390;
				statement();
				}
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 396;
			Match(UNTIL);
			State = 397;
			expression(0);
			State = 398;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
	 
		public PrintStatementContext() { }
		public virtual void CopyFrom(PrintStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintConParentesisContext : PrintStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(CustomLangParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CustomLangParser.STRING, 0); }
		public PrintConParentesisContext(PrintStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterPrintConParentesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitPrintConParentesis(this);
		}
	}
	public partial class PrintSinParentesisContext : PrintStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(CustomLangParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		public PrintSinParentesisContext(PrintStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterPrintSinParentesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitPrintSinParentesis(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_printStatement);
		try {
			State = 410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				_localctx = new PrintConParentesisContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				Match(PRINT);
				State = 401;
				Match(T__1);
				State = 404;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 402;
					expression(0);
					}
					break;
				case 2:
					{
					State = 403;
					Match(STRING);
					}
					break;
				}
				State = 406;
				Match(T__2);
				State = 407;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new PrintSinParentesisContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				Match(PRINT);
				State = 409;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 46, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(ID);
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 413;
				Match(T__1);
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6431440900L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
					{
					State = 414;
					expression(0);
					State = 419;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__0) {
						{
						{
						State = 415;
						Match(T__0);
						State = 416;
						expression(0);
						}
						}
						State = 421;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 424;
				Match(T__2);
				}
			}

			State = 427;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterSubFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitSubFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public SubFunctionCallContext subFunctionCall() {
		SubFunctionCallContext _localctx = new SubFunctionCallContext(Context, State);
		EnterRule(_localctx, 48, RULE_subFunctionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(ID);
			State = 430;
			Match(T__1);
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6431440900L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
				{
				State = 431;
				expression(0);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 432;
					Match(T__0);
					State = 433;
					expression(0);
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 441;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterKillStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitKillStatement(this);
		}
	}

	[RuleVersion(0)]
	public KillStatementContext killStatement() {
		KillStatementContext _localctx = new KillStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_killStatement);
		try {
			State = 447;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443;
				Match(T__10);
				State = 444;
				Match(SEMI);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445;
				Match(T__11);
				State = 446;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(T__12);
			State = 450;
			expression(0);
			State = 451;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CustomLangParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(BREAK);
			State = 454;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(CustomLangParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			Match(CONTINUE);
			State = 457;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoreStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CustomLangParser.SEMI, 0); }
		public StoreStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterStoreStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitStoreStatement(this);
		}
	}

	[RuleVersion(0)]
	public StoreStatementContext storeStatement() {
		StoreStatementContext _localctx = new StoreStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_storeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			expression(0);
			State = 460;
			Match(T__13);
			State = 461;
			expression(0);
			State = 462;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Suma_de_listaContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListSumContext listSum() {
			return GetRuleContext<ListSumContext>(0);
		}
		public Suma_de_listaContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterSuma_de_lista(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitSuma_de_lista(this);
		}
	}
	public partial class ParentesisExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParentesisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterParentesisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitParentesisExpression(this);
		}
	}
	public partial class ComplexStructuresContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatrixContext matrix() {
			return GetRuleContext<MatrixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexContext complex() {
			return GetRuleContext<ComplexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasetoRealContext basetoReal() {
			return GetRuleContext<BasetoRealContext>(0);
		}
		public ComplexStructuresContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterComplexStructures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitComplexStructures(this);
		}
	}
	public partial class SumatoriaContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SummationExpressionContext summationExpression() {
			return GetRuleContext<SummationExpressionContext>(0);
		}
		public SumatoriaContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterSumatoria(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitSumatoria(this);
		}
	}
	public partial class UnaryLogicalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CustomLangParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryLogicalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterUnaryLogical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitUnaryLogical(this);
		}
	}
	public partial class BasicValuesContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CustomLangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CustomLangParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(CustomLangParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		public BasicValuesContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterBasicValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitBasicValues(this);
		}
	}
	public partial class SingleRelationalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public SingleRelationalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterSingleRelational(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitSingleRelational(this);
		}
	}
	public partial class Producto_de_listaContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListProductContext listProduct() {
			return GetRuleContext<ListProductContext>(0);
		}
		public Producto_de_listaContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterProducto_de_lista(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitProducto_de_lista(this);
		}
	}
	public partial class IntegracionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegralExpressionContext integralExpression() {
			return GetRuleContext<IntegralExpressionContext>(0);
		}
		public IntegracionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterIntegracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitIntegracion(this);
		}
	}
	public partial class Primeras_diferencias_de_listaContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FirstDifferencesContext firstDifferences() {
			return GetRuleContext<FirstDifferencesContext>(0);
		}
		public Primeras_diferencias_de_listaContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterPrimeras_diferencias_de_lista(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitPrimeras_diferencias_de_lista(this);
		}
	}
	public partial class ExponentiationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExponentiationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterExponentiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitExponentiation(this);
		}
	}
	public partial class DerivadaContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivativeExpressionContext derivativeExpression() {
			return GetRuleContext<DerivativeExpressionContext>(0);
		}
		public DerivadaContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterDerivada(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitDerivada(this);
		}
	}
	public partial class RaizCuadradaContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqrtExpressionContext sqrtExpression() {
			return GetRuleContext<SqrtExpressionContext>(0);
		}
		public RaizCuadradaContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterRaizCuadrada(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitRaizCuadrada(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
	}
	public partial class AdditionOrSubtractionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionOrSubtractionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterAdditionOrSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitAdditionOrSubtraction(this);
		}
	}
	public partial class UnaryNegationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryNegationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterUnaryNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitUnaryNegation(this);
		}
	}
	public partial class MultiplicationOrDivisionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationOrDivisionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterMultiplicationOrDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitMultiplicationOrDivision(this);
		}
	}
	public partial class FunctionAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatrixAccessContext matrixAccess() {
			return GetRuleContext<MatrixAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessContext listAccess() {
			return GetRuleContext<ListAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubFunctionCallContext subFunctionCall() {
			return GetRuleContext<SubFunctionCallContext>(0);
		}
		public FunctionAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterFunctionAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitFunctionAccess(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				_localctx = new ParentesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 465;
				Match(T__1);
				State = 466;
				expression(0);
				State = 467;
				Match(T__2);
				}
				break;
			case 2:
				{
				_localctx = new UnaryLogicalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 469;
				Match(NOT);
				State = 470;
				expression(12);
				}
				break;
			case 3:
				{
				_localctx = new UnaryNegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 471;
				Match(T__18);
				State = 472;
				expression(11);
				}
				break;
			case 4:
				{
				_localctx = new ComplexStructuresContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 478;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 473;
					array();
					}
					break;
				case 2:
					{
					State = 474;
					matrix();
					}
					break;
				case 3:
					{
					State = 475;
					list();
					}
					break;
				case 4:
					{
					State = 476;
					complex();
					}
					break;
				case 5:
					{
					State = 477;
					basetoReal();
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new BasicValuesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 480;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 71L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				{
				_localctx = new FunctionAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 484;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 481;
					matrixAccess();
					}
					break;
				case 2:
					{
					State = 482;
					listAccess();
					}
					break;
				case 3:
					{
					State = 483;
					subFunctionCall();
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new IntegracionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 486;
				integralExpression();
				}
				break;
			case 8:
				{
				_localctx = new SumatoriaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 487;
				summationExpression();
				}
				break;
			case 9:
				{
				_localctx = new DerivadaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 488;
				derivativeExpression();
				}
				break;
			case 10:
				{
				_localctx = new RaizCuadradaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 489;
				sqrtExpression();
				}
				break;
			case 11:
				{
				_localctx = new Suma_de_listaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 490;
				listSum();
				}
				break;
			case 12:
				{
				_localctx = new Producto_de_listaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 491;
				listProduct();
				}
				break;
			case 13:
				{
				_localctx = new Primeras_diferencias_de_listaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 492;
				firstDifferences();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 514;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 512;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
					case 1:
						{
						_localctx = new ExponentiationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 495;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						{
						State = 496;
						Match(T__14);
						}
						State = 497;
						expression(18);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicationOrDivisionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 498;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 499;
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 500;
						expression(17);
						}
						break;
					case 3:
						{
						_localctx = new AdditionOrSubtractionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 501;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 502;
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==T__18) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 503;
						expression(16);
						}
						break;
					case 4:
						{
						_localctx = new SingleRelationalContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 504;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 505;
						relationalOperator();
						State = 506;
						expression(15);
						}
						break;
					case 5:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 508;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 509;
						logicalOperator();
						State = 510;
						expression(14);
						}
						break;
					}
					} 
				}
				State = 516;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 62, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(T__19);
			State = 518;
			expression(0);
			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 519;
				Match(T__0);
				State = 520;
				expression(0);
				}
				}
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 526;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MatrixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterMatrix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitMatrix(this);
		}
	}

	[RuleVersion(0)]
	public MatrixContext matrix() {
		MatrixContext _localctx = new MatrixContext(Context, State);
		EnterRule(_localctx, 64, RULE_matrix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			Match(T__19);
			{
			State = 529;
			Match(T__19);
			State = 530;
			expression(0);
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 531;
				Match(T__0);
				State = 532;
				expression(0);
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 538;
			Match(T__20);
			}
			State = 554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 540;
				Match(T__0);
				{
				State = 541;
				Match(T__19);
				State = 542;
				expression(0);
				State = 547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 543;
					Match(T__0);
					State = 544;
					expression(0);
					}
					}
					State = 549;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 550;
				Match(T__20);
				}
				}
				}
				State = 556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 557;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 66, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(T__21);
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6431440900L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 143L) != 0)) {
				{
				State = 560;
				expression(0);
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 561;
					Match(T__0);
					State = 562;
					expression(0);
					}
					}
					State = 567;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 570;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComplexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterComplex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitComplex(this);
		}
	}

	[RuleVersion(0)]
	public ComplexContext complex() {
		ComplexContext _localctx = new ComplexContext(Context, State);
		EnterRule(_localctx, 68, RULE_complex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			Match(T__1);
			State = 573;
			expression(0);
			State = 574;
			Match(T__0);
			State = 575;
			expression(0);
			State = 576;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		public IntegralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterIntegralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitIntegralExpression(this);
		}
	}

	[RuleVersion(0)]
	public IntegralExpressionContext integralExpression() {
		IntegralExpressionContext _localctx = new IntegralExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_integralExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(T__23);
			State = 579;
			Match(T__1);
			State = 580;
			expression(0);
			State = 581;
			Match(T__0);
			State = 582;
			Match(ID);
			State = 588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 583;
				Match(T__0);
				State = 584;
				expression(0);
				State = 585;
				Match(T__0);
				State = 586;
				expression(0);
				}
			}

			State = 590;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummationExpressionContext : ParserRuleContext {
		public SummationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summationExpression; } }
	 
		public SummationExpressionContext() { }
		public virtual void CopyFrom(SummationExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleSummationContext : SummationExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		public SimpleSummationContext(SummationExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterSimpleSummation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitSimpleSummation(this);
		}
	}
	public partial class MultiSummationContext : SummationExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public MultiSummationContext(SummationExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterMultiSummation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitMultiSummation(this);
		}
	}

	[RuleVersion(0)]
	public SummationExpressionContext summationExpression() {
		SummationExpressionContext _localctx = new SummationExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_summationExpression);
		try {
			State = 622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new SimpleSummationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				Match(T__24);
				State = 593;
				Match(T__1);
				State = 594;
				expression(0);
				State = 595;
				Match(T__0);
				State = 596;
				Match(ID);
				State = 597;
				Match(T__0);
				State = 598;
				expression(0);
				State = 599;
				Match(T__0);
				State = 600;
				expression(0);
				State = 601;
				Match(T__2);
				}
				break;
			case 2:
				_localctx = new MultiSummationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 603;
				Match(T__24);
				State = 604;
				Match(T__1);
				State = 605;
				Match(T__21);
				State = 606;
				expressionList();
				State = 607;
				Match(T__22);
				State = 608;
				Match(T__0);
				State = 609;
				Match(T__21);
				State = 610;
				idList();
				State = 611;
				Match(T__22);
				State = 612;
				Match(T__0);
				State = 613;
				Match(T__21);
				State = 614;
				expressionList();
				State = 615;
				Match(T__22);
				State = 616;
				Match(T__0);
				State = 617;
				Match(T__21);
				State = 618;
				expressionList();
				State = 619;
				Match(T__22);
				State = 620;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 74, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			expression(0);
			State = 629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 625;
				Match(T__0);
				State = 626;
				expression(0);
				}
				}
				State = 631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CustomLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CustomLangParser.ID, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 76, RULE_idList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(ID);
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 633;
				Match(T__0);
				State = 634;
				Match(ID);
				}
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CustomLangParser.EQUALS, 0); }
		public DerivativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterDerivativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitDerivativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public DerivativeExpressionContext derivativeExpression() {
		DerivativeExpressionContext _localctx = new DerivativeExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_derivativeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			Match(T__25);
			State = 641;
			Match(T__1);
			State = 642;
			expression(0);
			State = 643;
			Match(T__0);
			State = 644;
			Match(ID);
			State = 645;
			Match(EQUALS);
			State = 646;
			expression(0);
			State = 647;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqrtExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SqrtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqrtExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterSqrtExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitSqrtExpression(this);
		}
	}

	[RuleVersion(0)]
	public SqrtExpressionContext sqrtExpression() {
		SqrtExpressionContext _localctx = new SqrtExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_sqrtExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(T__26);
			State = 650;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListSumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListSumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listSum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterListSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitListSum(this);
		}
	}

	[RuleVersion(0)]
	public ListSumContext listSum() {
		ListSumContext _localctx = new ListSumContext(Context, State);
		EnterRule(_localctx, 82, RULE_listSum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(T__27);
			State = 653;
			Match(T__1);
			State = 654;
			expression(0);
			State = 655;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListProductContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListProductContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listProduct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterListProduct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitListProduct(this);
		}
	}

	[RuleVersion(0)]
	public ListProductContext listProduct() {
		ListProductContext _localctx = new ListProductContext(Context, State);
		EnterRule(_localctx, 84, RULE_listProduct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(T__28);
			State = 658;
			Match(T__1);
			State = 659;
			expression(0);
			State = 660;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstDifferencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FirstDifferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstDifferences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterFirstDifferences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitFirstDifferences(this);
		}
	}

	[RuleVersion(0)]
	public FirstDifferencesContext firstDifferences() {
		FirstDifferencesContext _localctx = new FirstDifferencesContext(Context, State);
		EnterRule(_localctx, 86, RULE_firstDifferences);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			Match(T__29);
			State = 663;
			Match(T__1);
			State = 664;
			expression(0);
			State = 665;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorialExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FactorialExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factorialExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterFactorialExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitFactorialExpression(this);
		}
	}

	[RuleVersion(0)]
	public FactorialExpressionContext factorialExpression() {
		FactorialExpressionContext _localctx = new FactorialExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_factorialExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			expression(0);
			State = 668;
			Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasetoRealContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BasetoRealContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basetoReal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterBasetoReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitBasetoReal(this);
		}
	}

	[RuleVersion(0)]
	public BasetoRealContext basetoReal() {
		BasetoRealContext _localctx = new BasetoRealContext(Context, State);
		EnterRule(_localctx, 90, RULE_basetoReal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			Match(T__31);
			State = 671;
			Match(T__1);
			State = 672;
			expression(0);
			State = 673;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CustomLangParser.EQUALS, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 92, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 1099511628287L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CustomLangParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CustomLangParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(CustomLangParser.XOR, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 94, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MatrixAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterMatrixAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitMatrixAccess(this);
		}
	}

	[RuleVersion(0)]
	public MatrixAccessContext matrixAccess() {
		MatrixAccessContext _localctx = new MatrixAccessContext(Context, State);
		EnterRule(_localctx, 96, RULE_matrixAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			Match(ID);
			State = 680;
			Match(T__1);
			State = 681;
			expression(0);
			State = 682;
			Match(T__0);
			State = 683;
			expression(0);
			State = 684;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CustomLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.EnterListAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICustomLangListener typedListener = listener as ICustomLangListener;
			if (typedListener != null) typedListener.ExitListAccess(this);
		}
	}

	[RuleVersion(0)]
	public ListAccessContext listAccess() {
		ListAccessContext _localctx = new ListAccessContext(Context, State);
		EnterRule(_localctx, 98, RULE_listAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			Match(ID);
			State = 687;
			Match(T__1);
			State = 688;
			expression(0);
			State = 689;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,77,692,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		1,0,1,0,1,0,1,0,1,0,5,0,106,8,0,10,0,12,0,109,9,0,1,0,1,0,1,1,1,1,1,1,
		3,1,116,8,1,1,1,1,1,1,1,1,1,1,1,5,1,123,8,1,10,1,12,1,126,9,1,1,1,1,1,
		1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,142,8,3,1,3,1,3,1,
		3,3,3,147,8,3,1,3,3,3,150,8,3,1,4,3,4,153,8,4,1,4,3,4,156,8,4,1,4,3,4,
		159,8,4,1,5,1,5,1,6,1,6,1,6,3,6,166,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		8,3,8,176,8,8,1,8,1,8,1,8,1,8,1,8,5,8,183,8,8,10,8,12,8,186,9,8,3,8,188,
		8,8,1,8,1,8,1,8,5,8,193,8,8,10,8,12,8,196,9,8,1,8,1,8,1,8,1,9,1,9,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,219,8,10,1,11,1,11,1,11,1,11,5,11,225,8,11,10,11,12,11,228,9,
		11,1,11,1,11,1,12,1,12,1,12,1,12,3,12,236,8,12,1,13,1,13,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,3,14,247,8,14,1,14,1,14,1,14,1,14,3,14,253,8,14,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,5,
		16,269,8,16,10,16,12,16,272,9,16,1,16,1,16,5,16,276,8,16,10,16,12,16,279,
		9,16,3,16,281,8,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,290,8,17,10,
		17,12,17,293,9,17,1,17,1,17,5,17,297,8,17,10,17,12,17,300,9,17,3,17,302,
		8,17,1,17,1,17,1,17,1,18,1,18,1,18,5,18,310,8,18,10,18,12,18,313,9,18,
		3,18,315,8,18,1,18,1,18,5,18,319,8,18,10,18,12,18,322,9,18,1,18,1,18,5,
		18,326,8,18,10,18,12,18,329,9,18,3,18,331,8,18,1,18,1,18,1,18,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,3,19,344,8,19,1,19,1,19,5,19,348,8,19,10,
		19,12,19,351,9,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,3,19,364,8,19,1,19,1,19,5,19,368,8,19,10,19,12,19,371,9,19,1,19,1,19,
		1,19,3,19,376,8,19,1,20,1,20,1,20,1,20,5,20,382,8,20,10,20,12,20,385,9,
		20,1,20,1,20,1,20,1,21,1,21,5,21,392,8,21,10,21,12,21,395,9,21,1,21,1,
		21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,405,8,22,1,22,1,22,1,22,1,22,3,22,
		411,8,22,1,23,1,23,1,23,1,23,1,23,5,23,418,8,23,10,23,12,23,421,9,23,3,
		23,423,8,23,1,23,3,23,426,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,5,24,
		435,8,24,10,24,12,24,438,9,24,3,24,440,8,24,1,24,1,24,1,25,1,25,1,25,1,
		25,3,25,448,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
		1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,3,30,479,8,30,1,30,1,30,1,30,1,30,3,30,485,8,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,494,8,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,513,8,
		30,10,30,12,30,516,9,30,1,31,1,31,1,31,1,31,5,31,522,8,31,10,31,12,31,
		525,9,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,5,32,534,8,32,10,32,12,32,
		537,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,546,8,32,10,32,12,32,
		549,9,32,1,32,1,32,5,32,553,8,32,10,32,12,32,556,9,32,1,32,1,32,1,33,1,
		33,1,33,1,33,5,33,564,8,33,10,33,12,33,567,9,33,3,33,569,8,33,1,33,1,33,
		1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,3,35,589,8,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,623,8,36,1,37,1,37,1,37,
		5,37,628,8,37,10,37,12,37,631,9,37,1,38,1,38,1,38,5,38,636,8,38,10,38,
		12,38,639,9,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,
		1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
		1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,47,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,0,1,60,
		50,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,0,8,1,0,9,10,1,0,72,73,2,0,54,54,56,56,2,0,69,71,75,75,1,0,16,17,
		1,0,18,19,2,0,33,41,73,73,1,0,65,67,738,0,107,1,0,0,0,2,112,1,0,0,0,4,
		130,1,0,0,0,6,141,1,0,0,0,8,152,1,0,0,0,10,160,1,0,0,0,12,162,1,0,0,0,
		14,169,1,0,0,0,16,175,1,0,0,0,18,200,1,0,0,0,20,218,1,0,0,0,22,220,1,0,
		0,0,24,231,1,0,0,0,26,237,1,0,0,0,28,252,1,0,0,0,30,254,1,0,0,0,32,266,
		1,0,0,0,34,285,1,0,0,0,36,306,1,0,0,0,38,375,1,0,0,0,40,377,1,0,0,0,42,
		389,1,0,0,0,44,410,1,0,0,0,46,412,1,0,0,0,48,429,1,0,0,0,50,447,1,0,0,
		0,52,449,1,0,0,0,54,453,1,0,0,0,56,456,1,0,0,0,58,459,1,0,0,0,60,493,1,
		0,0,0,62,517,1,0,0,0,64,528,1,0,0,0,66,559,1,0,0,0,68,572,1,0,0,0,70,578,
		1,0,0,0,72,622,1,0,0,0,74,624,1,0,0,0,76,632,1,0,0,0,78,640,1,0,0,0,80,
		649,1,0,0,0,82,652,1,0,0,0,84,657,1,0,0,0,86,662,1,0,0,0,88,667,1,0,0,
		0,90,670,1,0,0,0,92,675,1,0,0,0,94,677,1,0,0,0,96,679,1,0,0,0,98,686,1,
		0,0,0,100,106,3,4,2,0,101,106,3,14,7,0,102,106,3,16,8,0,103,106,3,12,6,
		0,104,106,3,2,1,0,105,100,1,0,0,0,105,101,1,0,0,0,105,102,1,0,0,0,105,
		103,1,0,0,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,
		0,0,0,108,110,1,0,0,0,109,107,1,0,0,0,110,111,5,0,0,1,111,1,1,0,0,0,112,
		113,5,64,0,0,113,115,5,75,0,0,114,116,5,1,0,0,115,114,1,0,0,0,115,116,
		1,0,0,0,116,117,1,0,0,0,117,118,5,69,0,0,118,119,5,2,0,0,119,120,5,3,0,
		0,120,124,5,43,0,0,121,123,3,20,10,0,122,121,1,0,0,0,123,126,1,0,0,0,124,
		122,1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,0,127,128,5,
		61,0,0,128,129,5,74,0,0,129,3,1,0,0,0,130,131,5,4,0,0,131,132,5,5,0,0,
		132,133,5,2,0,0,133,134,3,6,3,0,134,135,5,3,0,0,135,5,1,0,0,0,136,137,
		5,6,0,0,137,138,5,2,0,0,138,139,3,8,4,0,139,140,5,3,0,0,140,142,1,0,0,
		0,141,136,1,0,0,0,141,142,1,0,0,0,142,149,1,0,0,0,143,144,5,7,0,0,144,
		146,5,2,0,0,145,147,3,10,5,0,146,145,1,0,0,0,146,147,1,0,0,0,147,148,1,
		0,0,0,148,150,5,3,0,0,149,143,1,0,0,0,149,150,1,0,0,0,150,7,1,0,0,0,151,
		153,5,8,0,0,152,151,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,156,5,
		1,0,0,155,154,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,159,5,74,0,0,
		158,157,1,0,0,0,158,159,1,0,0,0,159,9,1,0,0,0,160,161,7,0,0,0,161,11,1,
		0,0,0,162,165,5,69,0,0,163,164,5,72,0,0,164,166,3,60,30,0,165,163,1,0,
		0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,168,5,74,0,0,168,13,1,0,0,0,169,
		170,5,69,0,0,170,171,5,2,0,0,171,172,5,3,0,0,172,173,5,74,0,0,173,15,1,
		0,0,0,174,176,5,42,0,0,175,174,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,
		177,178,5,69,0,0,178,187,5,2,0,0,179,184,3,18,9,0,180,181,5,1,0,0,181,
		183,3,18,9,0,182,180,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,
		0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,187,179,1,0,0,0,187,188,1,0,0,0,
		188,189,1,0,0,0,189,190,5,3,0,0,190,194,5,43,0,0,191,193,3,20,10,0,192,
		191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,
		0,0,0,196,194,1,0,0,0,197,198,5,61,0,0,198,199,5,74,0,0,199,17,1,0,0,0,
		200,201,5,69,0,0,201,19,1,0,0,0,202,219,3,22,11,0,203,219,3,28,14,0,204,
		219,3,32,16,0,205,219,3,34,17,0,206,219,3,36,18,0,207,219,3,40,20,0,208,
		219,3,38,19,0,209,219,3,42,21,0,210,219,3,44,22,0,211,219,3,46,23,0,212,
		219,3,50,25,0,213,219,3,52,26,0,214,219,3,54,27,0,215,219,3,56,28,0,216,
		219,3,30,15,0,217,219,3,58,29,0,218,202,1,0,0,0,218,203,1,0,0,0,218,204,
		1,0,0,0,218,205,1,0,0,0,218,206,1,0,0,0,218,207,1,0,0,0,218,208,1,0,0,
		0,218,209,1,0,0,0,218,210,1,0,0,0,218,211,1,0,0,0,218,212,1,0,0,0,218,
		213,1,0,0,0,218,214,1,0,0,0,218,215,1,0,0,0,218,216,1,0,0,0,218,217,1,
		0,0,0,219,21,1,0,0,0,220,221,5,44,0,0,221,226,3,24,12,0,222,223,5,1,0,
		0,223,225,3,24,12,0,224,222,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,
		227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,5,74,0,0,230,23,1,
		0,0,0,231,235,5,69,0,0,232,233,3,26,13,0,233,234,3,60,30,0,234,236,1,0,
		0,0,235,232,1,0,0,0,235,236,1,0,0,0,236,25,1,0,0,0,237,238,7,1,0,0,238,
		27,1,0,0,0,239,240,5,69,0,0,240,241,5,72,0,0,241,242,3,60,30,0,242,243,
		5,74,0,0,243,253,1,0,0,0,244,247,3,96,48,0,245,247,3,98,49,0,246,244,1,
		0,0,0,246,245,1,0,0,0,247,248,1,0,0,0,248,249,5,72,0,0,249,250,3,60,30,
		0,250,251,5,74,0,0,251,253,1,0,0,0,252,239,1,0,0,0,252,246,1,0,0,0,253,
		29,1,0,0,0,254,255,3,60,30,0,255,256,3,92,46,0,256,257,3,60,30,0,257,258,
		3,92,46,0,258,259,3,60,30,0,259,260,3,94,47,0,260,261,3,60,30,0,261,262,
		3,92,46,0,262,263,3,60,30,0,263,264,3,92,46,0,264,265,3,60,30,0,265,31,
		1,0,0,0,266,270,5,45,0,0,267,269,3,20,10,0,268,267,1,0,0,0,269,272,1,0,
		0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,280,1,0,0,0,272,270,1,0,0,0,273,
		277,5,46,0,0,274,276,3,20,10,0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,
		1,0,0,0,277,278,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,280,273,1,0,0,
		0,280,281,1,0,0,0,281,282,1,0,0,0,282,283,5,61,0,0,283,284,5,74,0,0,284,
		33,1,0,0,0,285,286,5,47,0,0,286,287,3,60,30,0,287,291,5,48,0,0,288,290,
		3,20,10,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,
		0,0,292,301,1,0,0,0,293,291,1,0,0,0,294,298,5,49,0,0,295,297,3,20,10,0,
		296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,302,
		1,0,0,0,300,298,1,0,0,0,301,294,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,
		0,303,304,5,61,0,0,304,305,5,74,0,0,305,35,1,0,0,0,306,314,5,50,0,0,307,
		315,3,60,30,0,308,310,3,20,10,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,
		1,0,0,0,311,312,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,314,307,1,0,0,
		0,314,311,1,0,0,0,315,316,1,0,0,0,316,320,5,48,0,0,317,319,3,20,10,0,318,
		317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,330,1,
		0,0,0,322,320,1,0,0,0,323,327,5,49,0,0,324,326,3,20,10,0,325,324,1,0,0,
		0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,331,1,0,0,0,329,
		327,1,0,0,0,330,323,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,5,
		61,0,0,333,334,5,74,0,0,334,37,1,0,0,0,335,336,5,51,0,0,336,337,5,69,0,
		0,337,338,5,72,0,0,338,339,3,60,30,0,339,340,7,2,0,0,340,343,3,60,30,0,
		341,342,5,57,0,0,342,344,3,60,30,0,343,341,1,0,0,0,343,344,1,0,0,0,344,
		345,1,0,0,0,345,349,5,55,0,0,346,348,3,20,10,0,347,346,1,0,0,0,348,351,
		1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,1,0,0,
		0,352,353,5,61,0,0,353,354,5,74,0,0,354,376,1,0,0,0,355,356,5,51,0,0,356,
		357,3,60,30,0,357,358,5,52,0,0,358,359,3,60,30,0,359,360,7,2,0,0,360,363,
		3,60,30,0,361,362,5,57,0,0,362,364,3,60,30,0,363,361,1,0,0,0,363,364,1,
		0,0,0,364,365,1,0,0,0,365,369,5,55,0,0,366,368,3,20,10,0,367,366,1,0,0,
		0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,
		369,1,0,0,0,372,373,5,61,0,0,373,374,5,74,0,0,374,376,1,0,0,0,375,335,
		1,0,0,0,375,355,1,0,0,0,376,39,1,0,0,0,377,378,5,53,0,0,378,379,3,60,30,
		0,379,383,5,55,0,0,380,382,3,20,10,0,381,380,1,0,0,0,382,385,1,0,0,0,383,
		381,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,383,1,0,0,0,386,387,5,
		61,0,0,387,388,5,74,0,0,388,41,1,0,0,0,389,393,5,59,0,0,390,392,3,20,10,
		0,391,390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,
		396,1,0,0,0,395,393,1,0,0,0,396,397,5,60,0,0,397,398,3,60,30,0,398,399,
		5,74,0,0,399,43,1,0,0,0,400,401,5,58,0,0,401,404,5,2,0,0,402,405,3,60,
		30,0,403,405,5,75,0,0,404,402,1,0,0,0,404,403,1,0,0,0,404,405,1,0,0,0,
		405,406,1,0,0,0,406,407,5,3,0,0,407,411,5,74,0,0,408,409,5,58,0,0,409,
		411,5,74,0,0,410,400,1,0,0,0,410,408,1,0,0,0,411,45,1,0,0,0,412,425,5,
		69,0,0,413,422,5,2,0,0,414,419,3,60,30,0,415,416,5,1,0,0,416,418,3,60,
		30,0,417,415,1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,
		423,1,0,0,0,421,419,1,0,0,0,422,414,1,0,0,0,422,423,1,0,0,0,423,424,1,
		0,0,0,424,426,5,3,0,0,425,413,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,
		427,428,5,74,0,0,428,47,1,0,0,0,429,430,5,69,0,0,430,439,5,2,0,0,431,436,
		3,60,30,0,432,433,5,1,0,0,433,435,3,60,30,0,434,432,1,0,0,0,435,438,1,
		0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,
		439,431,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,442,5,3,0,0,442,49,
		1,0,0,0,443,444,5,11,0,0,444,448,5,74,0,0,445,446,5,12,0,0,446,448,5,74,
		0,0,447,443,1,0,0,0,447,445,1,0,0,0,448,51,1,0,0,0,449,450,5,13,0,0,450,
		451,3,60,30,0,451,452,5,74,0,0,452,53,1,0,0,0,453,454,5,62,0,0,454,455,
		5,74,0,0,455,55,1,0,0,0,456,457,5,63,0,0,457,458,5,74,0,0,458,57,1,0,0,
		0,459,460,3,60,30,0,460,461,5,14,0,0,461,462,3,60,30,0,462,463,5,74,0,
		0,463,59,1,0,0,0,464,465,6,30,-1,0,465,466,5,2,0,0,466,467,3,60,30,0,467,
		468,5,3,0,0,468,494,1,0,0,0,469,470,5,68,0,0,470,494,3,60,30,12,471,472,
		5,19,0,0,472,494,3,60,30,11,473,479,3,62,31,0,474,479,3,64,32,0,475,479,
		3,66,33,0,476,479,3,68,34,0,477,479,3,90,45,0,478,473,1,0,0,0,478,474,
		1,0,0,0,478,475,1,0,0,0,478,476,1,0,0,0,478,477,1,0,0,0,479,494,1,0,0,
		0,480,494,7,3,0,0,481,485,3,96,48,0,482,485,3,98,49,0,483,485,3,48,24,
		0,484,481,1,0,0,0,484,482,1,0,0,0,484,483,1,0,0,0,485,494,1,0,0,0,486,
		494,3,70,35,0,487,494,3,72,36,0,488,494,3,78,39,0,489,494,3,80,40,0,490,
		494,3,82,41,0,491,494,3,84,42,0,492,494,3,86,43,0,493,464,1,0,0,0,493,
		469,1,0,0,0,493,471,1,0,0,0,493,478,1,0,0,0,493,480,1,0,0,0,493,484,1,
		0,0,0,493,486,1,0,0,0,493,487,1,0,0,0,493,488,1,0,0,0,493,489,1,0,0,0,
		493,490,1,0,0,0,493,491,1,0,0,0,493,492,1,0,0,0,494,514,1,0,0,0,495,496,
		10,17,0,0,496,497,5,15,0,0,497,513,3,60,30,18,498,499,10,16,0,0,499,500,
		7,4,0,0,500,513,3,60,30,17,501,502,10,15,0,0,502,503,7,5,0,0,503,513,3,
		60,30,16,504,505,10,14,0,0,505,506,3,92,46,0,506,507,3,60,30,15,507,513,
		1,0,0,0,508,509,10,13,0,0,509,510,3,94,47,0,510,511,3,60,30,14,511,513,
		1,0,0,0,512,495,1,0,0,0,512,498,1,0,0,0,512,501,1,0,0,0,512,504,1,0,0,
		0,512,508,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,
		61,1,0,0,0,516,514,1,0,0,0,517,518,5,20,0,0,518,523,3,60,30,0,519,520,
		5,1,0,0,520,522,3,60,30,0,521,519,1,0,0,0,522,525,1,0,0,0,523,521,1,0,
		0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,523,1,0,0,0,526,527,5,21,0,0,527,
		63,1,0,0,0,528,529,5,20,0,0,529,530,5,20,0,0,530,535,3,60,30,0,531,532,
		5,1,0,0,532,534,3,60,30,0,533,531,1,0,0,0,534,537,1,0,0,0,535,533,1,0,
		0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,539,5,21,0,0,539,
		554,1,0,0,0,540,541,5,1,0,0,541,542,5,20,0,0,542,547,3,60,30,0,543,544,
		5,1,0,0,544,546,3,60,30,0,545,543,1,0,0,0,546,549,1,0,0,0,547,545,1,0,
		0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,547,1,0,0,0,550,551,5,21,0,0,551,
		553,1,0,0,0,552,540,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,
		0,0,0,555,557,1,0,0,0,556,554,1,0,0,0,557,558,5,21,0,0,558,65,1,0,0,0,
		559,568,5,22,0,0,560,565,3,60,30,0,561,562,5,1,0,0,562,564,3,60,30,0,563,
		561,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,569,1,
		0,0,0,567,565,1,0,0,0,568,560,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,
		570,571,5,23,0,0,571,67,1,0,0,0,572,573,5,2,0,0,573,574,3,60,30,0,574,
		575,5,1,0,0,575,576,3,60,30,0,576,577,5,3,0,0,577,69,1,0,0,0,578,579,5,
		24,0,0,579,580,5,2,0,0,580,581,3,60,30,0,581,582,5,1,0,0,582,588,5,69,
		0,0,583,584,5,1,0,0,584,585,3,60,30,0,585,586,5,1,0,0,586,587,3,60,30,
		0,587,589,1,0,0,0,588,583,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,
		591,5,3,0,0,591,71,1,0,0,0,592,593,5,25,0,0,593,594,5,2,0,0,594,595,3,
		60,30,0,595,596,5,1,0,0,596,597,5,69,0,0,597,598,5,1,0,0,598,599,3,60,
		30,0,599,600,5,1,0,0,600,601,3,60,30,0,601,602,5,3,0,0,602,623,1,0,0,0,
		603,604,5,25,0,0,604,605,5,2,0,0,605,606,5,22,0,0,606,607,3,74,37,0,607,
		608,5,23,0,0,608,609,5,1,0,0,609,610,5,22,0,0,610,611,3,76,38,0,611,612,
		5,23,0,0,612,613,5,1,0,0,613,614,5,22,0,0,614,615,3,74,37,0,615,616,5,
		23,0,0,616,617,5,1,0,0,617,618,5,22,0,0,618,619,3,74,37,0,619,620,5,23,
		0,0,620,621,5,3,0,0,621,623,1,0,0,0,622,592,1,0,0,0,622,603,1,0,0,0,623,
		73,1,0,0,0,624,629,3,60,30,0,625,626,5,1,0,0,626,628,3,60,30,0,627,625,
		1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,75,1,0,0,0,
		631,629,1,0,0,0,632,637,5,69,0,0,633,634,5,1,0,0,634,636,5,69,0,0,635,
		633,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,77,1,0,
		0,0,639,637,1,0,0,0,640,641,5,26,0,0,641,642,5,2,0,0,642,643,3,60,30,0,
		643,644,5,1,0,0,644,645,5,69,0,0,645,646,5,73,0,0,646,647,3,60,30,0,647,
		648,5,3,0,0,648,79,1,0,0,0,649,650,5,27,0,0,650,651,3,60,30,0,651,81,1,
		0,0,0,652,653,5,28,0,0,653,654,5,2,0,0,654,655,3,60,30,0,655,656,5,3,0,
		0,656,83,1,0,0,0,657,658,5,29,0,0,658,659,5,2,0,0,659,660,3,60,30,0,660,
		661,5,3,0,0,661,85,1,0,0,0,662,663,5,30,0,0,663,664,5,2,0,0,664,665,3,
		60,30,0,665,666,5,3,0,0,666,87,1,0,0,0,667,668,3,60,30,0,668,669,5,31,
		0,0,669,89,1,0,0,0,670,671,5,32,0,0,671,672,5,2,0,0,672,673,3,60,30,0,
		673,674,5,3,0,0,674,91,1,0,0,0,675,676,7,6,0,0,676,93,1,0,0,0,677,678,
		7,7,0,0,678,95,1,0,0,0,679,680,5,69,0,0,680,681,5,2,0,0,681,682,3,60,30,
		0,682,683,5,1,0,0,683,684,3,60,30,0,684,685,5,3,0,0,685,97,1,0,0,0,686,
		687,5,69,0,0,687,688,5,2,0,0,688,689,3,60,30,0,689,690,5,3,0,0,690,99,
		1,0,0,0,61,105,107,115,124,141,146,149,152,155,158,165,175,184,187,194,
		218,226,235,246,252,270,277,280,291,298,301,311,314,320,327,330,343,349,
		363,369,375,383,393,404,410,419,422,425,436,439,447,478,484,493,512,514,
		523,535,547,554,565,568,588,622,629,637
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
